import http from 'http';
import config from './config/env.config';
import logging from './config/logging.config';
import express from 'express';
import bodyParser from 'body-parser';
import cocktailRoutes from './routes/cocktail.route';
import { NotFound, OK } from './utils/HTTP_Code.utils';

const NAMESPACE = 'Server';
const API_ROOT = '/api/v1';
const router = express();

///////////////////////////////////////////////////////////////////////////////////////////////////
// Logging the request ////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
router.use((req, res, next) => {
    logging.info(NAMESPACE, `METHOD: [${req.method}] - URL: [${req.url}] - IP: [${req.socket.remoteAddress}]`);
    res.on('finish', () => logging.info(NAMESPACE, `METHOD: [${req.method}] - URL: [${req.url}] - STATUS: [${req.statusCode}] - IP: [${req.socket.remoteAddress}]`));
    next();
});

///////////////////////////////////////////////////////////////////////////////////////////////////
// Parse the request //////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
router.use(bodyParser.urlencoded({ extended: false }));
router.use(bodyParser.json());

///////////////////////////////////////////////////////////////////////////////////////////////////
// API rules //////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
router.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');

    if (req.method == 'OPTIONS') {
        res.header('Access-Control-Allow-Methods', 'GET, DELETE, POST, PUT');
        res.header('Access-Control-Allow-Headers', 'X-Api-Key, Content-Type');
        return res.status(OK).json({});
    }

    next();
});

///////////////////////////////////////////////////////////////////////////////////////////////////
// Routes /////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
router.use(`${API_ROOT}/cocktails`, cocktailRoutes);

///////////////////////////////////////////////////////////////////////////////////////////////////
// Error handling /////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
router.use((req, res, next) => {
    const error = new Error('Not found');
    return res.status(NotFound).json({
        message: error.message
    });
});

///////////////////////////////////////////////////////////////////////////////////////////////////
// Create the server //////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
const httpServer = http.createServer(router);
httpServer.listen(config.server.port, () => {
    logging.lineBreak();
    logging.info(NAMESPACE, `Server running on ${config.server.hostname}:${config.server.port}`);
});
